#!/usr/bin/env python3
# bot_protected.py
"""
Telegram bot: —â–æ–¥–µ–Ω–Ω—ñ –≤—ñ–¥–µ–æ-—É—Ä–æ–∫–∏ –æ 08:00 Europe/Warsaw (5 –º–æ–¥—É–ª—ñ–≤).
–ó–∞—Ö–∏—Å—Ç: protect_content + –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫ (ffmpeg drawtext).

–Ü–ù–°–¢–†–£–ö–¶–Ü–Ø:
1. –°—Ç–≤–æ—Ä–∏ –ø–∞–ø–∫—É "videos" —ñ –ø–æ–∫–ª–∞–¥–∏ –≤ –Ω–µ—ó:
   module1.mp4, module2.mp4, module3.mp4, module4.mp4, module5.mp4
2. –í—Å—Ç–∞–Ω–æ–≤–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:
   pip install aiogram apscheduler python-dotenv
3. –í—Å—Ç–∞–Ω–æ–≤–∏ ffmpeg (–º–∞—î –±—É—Ç–∏ –≤ PATH).
4. –í–∫–∞–∂–∏ —à–ª—è—Ö –¥–æ —à—Ä–∏—Ñ—Ç—É TTF —É FONT_PATH (–Ω–∏–∂—á–µ).
   –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf
5. –°—Ç–≤–æ—Ä–∏ .env –∑:
   BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞
6. –ó–∞–ø—É—Å–∫:
   python bot_protected.py
"""

import asyncio
import json
import logging
import os
import subprocess
import tempfile
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# ----------------- –ö–û–ù–§–Ü–ì -----------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–í–∫–∞–∂–∏ BOT_TOKEN –≤ .env —Ñ–∞–π–ª—ñ")

VIDEOS_DIR = Path("videos")
USERS_FILE = Path("users.json")
TIMEZONE = ZoneInfo("Europe/Warsaw")
SCHEDULE_HOUR = 8
SCHEDULE_MINUTE = 0

# –ù–∞–∑–≤–∏ –≤—ñ–¥–µ–æ (–ø–æ 5 –º–æ–¥—É–ª—ñ–≤)
MODULE_VIDEOS = [
    "module1.mp4",
    "module2.mp4",
    "module3.mp4",
    "module4.mp4",
    "module5.mp4",
]

# –¢–µ–∫—Å—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º–æ–¥—É–ª—è (–∫–æ—Ä–æ—Ç–∫–æ, –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ)
MODULE_TEXTS = [
    (
        "üéì *–ú–æ–¥—É–ª—å 1 ‚Äî –û—Å–Ω–æ–≤–∏ –¥–∏–∑–∞–π–Ω—É, —â–æ –ø—Ä–æ–¥–∞—î*\n\n"
        "üî∏ –Ø–∫ –º–∏—Å–ª–∏—Ç–∏ —è–∫ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, –∞ –Ω–µ —è–∫ –¥–∏–∑–∞–π–Ω–µ—Ä\n"
        "üî∏ –ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è: –∫–æ–ª—å–æ—Ä–∏, —à—Ä–∏—Ñ—Ç–∏, –∫–æ–º–ø–æ–∑–∏—Ü—ñ—è\n"
        "üî∏ –¢–∏–ø–æ–≤—ñ –ø–æ–º–∏–ª–∫–∏ —É –≤—ñ–∑—É–∞–ª–∞—Ö –¥–ª—è –∫—É—Ä—Å—ñ–≤\n\n"
        "_–ü—ñ–¥–∫–∞–∑–∫–∞:_ –ø–æ—á–Ω–∏ –∑ –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏ ‚Äî –∫—Ä–∞—Å–∏–≤–æ –º–∞—î –ø—Ä–æ–¥–∞–≤–∞—Ç–∏."
    ),
    (
        "üé® *–ú–æ–¥—É–ª—å 2 ‚Äî Canva: —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤—ñ–≤*\n\n"
        "üî∏ –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —à–∞–±–ª–æ–Ω–∏, –±—Ä–µ–Ω–¥–∏–Ω–≥\n"
        "üî∏ –†–æ–±–æ—Ç–∞ –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º–∏ —Å—Ö–µ–º–∞–º–∏ —Ç–∞ —à—Ä–∏—Ñ—Ç–∞–º–∏\n"
        "üî∏ –ê–¥–∞–ø—Ç–∞—Ü—ñ—è —à–∞–±–ª–æ–Ω—ñ–≤ –ø—ñ–¥ –Ω—ñ—à—É\n\n"
        "_–ü—ñ–¥–∫–∞–∑–∫–∞:_ —à–∞–±–ª–æ–Ω ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, —Ä–æ–±–∏ –π–æ–≥–æ —Å–≤–æ—ó–º."
    ),
    (
        "üöÄ *–ú–æ–¥—É–ª—å 3 ‚Äî –ö—Ä–µ–∞—Ç–∏–≤, —è–∫–∏–π –ø—Ä–æ–¥–∞—î*\n\n"
        "üî∏ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–Ω–µ—Ä–∞: Hook ‚Üí Value ‚Üí CTA\n"
        "üî∏ –í–∏–±—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–º–æ—Ü—ñ–π–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É\n"
        "üî∏ –ü—Ä–∏–∫–ª–∞–¥–∏ —Ä–æ–±–æ—á–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤—ñ–≤\n\n"
        "_–ü—ñ–¥–∫–∞–∑–∫–∞:_ –µ–º–æ—Ü—ñ—è + —á—ñ—Ç–∫–∏–π CTA = –∫–æ–Ω–≤–µ—Ä—Å—ñ—è."
    ),
    (
        "‚úçÔ∏è *–ú–æ–¥—É–ª—å 4 ‚Äî –ü—Ä–∞–∫—Ç–∏–∫–∞: —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä—à–∏–π –ø—Ä–æ–¥–∞—é—á–∏–π –∫—Ä–µ–∞—Ç–∏–≤*\n\n"
        "üî∏ –ü–æ–∫—Ä–æ–∫–æ–≤–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏–∑–∞–π–Ω—É\n"
        "üî∏ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–Ω–µ—Ä–∞ –¥–ª—è Meta, Telegram, –ª–µ–Ω–¥–∏–Ω–≥—É\n"
        "üî∏ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ –∞–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ\n\n"
        "_–ü—ñ–¥–∫–∞–∑–∫–∞:_ —Ç–µ—Å—Ç—É–π A/B —ñ –∑–≤—É–∂—É–π –∞—É–¥–∏—Ç–æ—Ä—ñ—é."
    ),
    (
        "üåü *–ú–æ–¥—É–ª—å 5 ‚Äî –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ —Ñ—ñ—à–∫–∏ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∏*\n\n"
        "üî∏ –ë—Ä–µ–Ω–¥-–ø–∞–∫ —É Canva\n"
        "üî∏ –û–±–∫–ª–∞–¥–∏–Ω–∫–∏ –¥–ª—è –≤—ñ–¥–µ–æ, —Å–ª–∞–π–¥—ñ–≤, –∫—É—Ä—Å—ñ–≤\n"
        "üî∏ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏–∑–∞–π–Ω—ñ–≤\n\n"
        "_–ü—ñ–¥–∫–∞–∑–∫–∞:_ —Å–∏—Å—Ç–µ–º–Ω—ñ—Å—Ç—å –µ–∫–æ–Ω–æ–º–∏—Ç—å —Ç–∏—Å—è—á—ñ –≥–æ–¥–∏–Ω."
    ),
]

# –ó–∞—Ö–∏—Å—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
ENABLE_WATERMARK = True
# –®–ª—è—Ö –¥–æ —à—Ä–∏—Ñ—Ç—É TTF (–æ–Ω–æ–≤–∏ –ø—ñ–¥ —Å–≤—ñ–π —Å–µ—Ä–≤–µ—Ä)
FONT_PATH = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
# –®–∞–±–ª–æ–Ω drawtext (–º–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä / –ø–æ–∑–∏—Ü—ñ—é)
# {text} –±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ user_tag + datetime
DRAWTEXT_TEMPLATE = (
    "fontfile={font}:text='{text}':fontsize=24:fontcolor=white:box=1:boxcolor=black@0.5:"
    "boxborderw=5:x=10:y=H-th-10"
)

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ----------------- –ö–û–†–ò–°–¢–£–í–ê–ß–Ü / –ó–ë–ï–†–Ü–ì–ê–ù–ù–Ø -----------------
def load_users() -> Dict[str, dict]:
    if USERS_FILE.exists():
        try:
            with open(USERS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            logger.exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ users.json ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π.")
            return {}
    return {}

def save_users(data: Dict[str, dict]):
    try:
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ users.json")

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ users: { "<chat_id>": {"module_idx": int, "subscribed": bool} }
users = load_users()

# ----------------- –§–£–ù–ö–¶–Ü–Ø: –°–¢–í–û–†–ò–¢–ò –í–Ü–î–ï–û –ó –í–û–î–Ø–ù–ò–ú –ó–ù–ê–ö–û–ú -----------------
def create_watermarked_video(input_path: Path, user_tag: str) -> Path:
    """
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î ffmpeg drawtext –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –≤–æ–¥—è–Ω–æ–≥–æ –≤—ñ–¥–µ–æ.
    –ü–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É (–Ω–µ –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ) ‚Äî –≤–∏–∫–ª–∏–∫–∞—á –º–∞—î –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.
    –ë–∞–≤—Å—è –æ–±–µ—Ä–µ–∂–Ω–æ: —Ü–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫ ffmpeg (CPU-bound).
    """
    if not Path(FONT_PATH).exists():
        raise FileNotFoundError(f"–®—Ä–∏—Ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {FONT_PATH}")

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
    raw_text = f"{user_tag} ‚Ä¢ {timestamp}"
    # –µ—Å–∫–µ–π–ø –¥–≤–æ–∫—Ä–∞–ø–∫–∏ —Ç–∞ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∞ –¥–ª—è ffmpeg
    safe_text = raw_text.replace(":", "\\:").replace("'", "\\'")
    drawtext = DRAWTEXT_TEMPLATE.format(font=FONT_PATH, text=safe_text)

    tmpf = tempfile.NamedTemporaryFile(prefix="wm_", suffix=".mp4", delete=False)
    out_path = Path(tmpf.name)
    tmpf.close()

    cmd = [
        "ffmpeg",
        "-y",
        "-i",
        str(input_path),
        "-vf",
        f"drawtext={drawtext}",
        "-c:a",
        "copy",
        str(out_path),
    ]
    logger.info("–ó–∞–ø—É—Å–∫–∞—é ffmpeg –¥–ª—è %s -> %s", input_path, out_path)
    proc = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if proc.returncode != 0:
        # –ø—Ä–∏–±—Ä–∞—Ç–∏ —Ñ–∞–π–ª —è–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫
        try:
            out_path.unlink(missing_ok=True)
        except Exception:
            pass
        err = proc.stderr.decode("utf-8", errors="ignore")
        logger.error("ffmpeg –ø–æ–º–∏–ª–∫–∞: %s", err)
        raise RuntimeError(f"ffmpeg failed: {err}")
    logger.info("ffmpeg –∑–∞–≤–µ—Ä—à–∏–≤—Å—è —É—Å–ø—ñ—à–Ω–æ –¥–ª—è %s", input_path)
    return out_path

# ----------------- –í–Ü–î–ü–†–ê–í–ö–ê –£–†–û–ö–£ –ö–û–†–ò–°–¢–£–í–ê–ß–£ -----------------
async def send_lesson_to_user(chat_id: int):
    key = str(chat_id)
    if key not in users or not users[key].get("subscribed", False):
        return

    idx = users[key].get("module_idx", 0)
    if idx >= len(MODULE_VIDEOS):
        # –ö—ñ–Ω–µ—Ü—å –∫—É—Ä—Å—É
        try:
            await bot.send_message(chat_id, "‚úÖ –í–∏ –ø—Ä–æ–π—à–ª–∏ –≤—Å—ñ 5 –º–æ–¥—É–ª—ñ–≤ –∫—É—Ä—Å—É. –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start.")
        except Exception:
            logger.exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è %s", chat_id)
        users[key]["subscribed"] = False
        save_users(users)
        return

    video_file = VIDEOS_DIR / MODULE_VIDEOS[idx]
    caption = MODULE_TEXTS[idx]

    if not video_file.exists():
        await bot.send_message(chat_id, f"‚ö†Ô∏è –í—ñ–¥–µ–æ –¥–ª—è –º–æ–¥—É–ª—è {idx+1} —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –ü–∏—à—ñ—Ç—å –∞–¥–º—ñ–Ω—É.")
        logger.error("–í—ñ–¥–µ–æ –≤—ñ–¥—Å—É—Ç–Ω—î: %s", video_file)
        return

    send_path: Path = video_file
    temp_to_remove: Optional[Path] = None
    try:
        # –Ø–∫—â–æ –∑–∞—Ö–∏—Å—Ç –≤–≤—ñ–º–∫–Ω–µ–Ω–æ ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫
        if ENABLE_WATERMARK:
            try:
                chat = await bot.get_chat(chat_id)
                user_tag = chat.username or f"id{chat_id}"
            except Exception:
                user_tag = f"id{chat_id}"

            try:
                send_path = create_watermarked_video(video_file, user_tag)
                temp_to_remove = send_path
            except Exception as e:
                logger.exception("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫: %s", e)
                # fallback –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª –±–µ–∑ watermark
                send_path = video_file
                temp_to_remove = None

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑ protect_content=True
        # aiogram —É —Ä—ñ–∑–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö –º–æ–∂–µ –ø—Ä–∏–π–º–∞—Ç–∏ protect_content, –ø—Ä–æ–±—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –≤–∏–∫–ª–∏–∫
        with open(send_path, "rb") as fp:
            # –Ø–∫—â–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î protect_content ‚Äî —Ü–µ –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ TypeError.
            # –ê–ª–µ –∑–∞–∑–≤–∏—á–∞–π –≤–æ–Ω–æ –ø—Ä–∞—Ü—é—î. –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ ‚Äî –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ bot.api_call("sendVideo", {...})
            await bot.send_video(
                chat_id=chat_id,
                video=fp,
                caption=caption,
                parse_mode="Markdown",
                protect_content=True,
            )

        # –ü—ñ—Å–ª—è —É—Å–ø—ñ—Ö—É ‚Äî –ø—ñ–¥–≤–∏—â—É—î–º–æ —ñ–Ω–¥–µ–∫—Å
        users[key]["module_idx"] = idx + 1
        save_users(users)
        logger.info("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥—É–ª—å %d –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É %s", idx + 1, chat_id)

    except TypeError as te:
        # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ aiogram –Ω–µ –æ—á—ñ–∫—É—î protect_content ‚Äî fallback –Ω–∞ api_call
        logger.warning("TypeError –ø—Ä–∏ send_video (–º–∞–±—É—Ç—å protect_content –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è), –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é api_call: %s", te)
        try:
            # –î–ª—è api_call –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ multipart-—Ñ–æ—Ä–º–∏; aiogram.Bot.api_call –ø—ñ–¥—Ç—Ä–∏–º—É—î –ø–µ—Ä–µ–¥–∞—á—É files —á–µ—Ä–µ–∑ kwargs
            # –¢—Ä–æ—Ö–∏ –≥—Ä—É–±–∏–π fallback ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ sendVideo –±–µ–∑ protect_content
            with open(send_path, "rb") as fp:
                await bot.send_video(chat_id=chat_id, video=fp, caption=caption, parse_mode="Markdown")
            users[key]["module_idx"] = idx + 1
            save_users(users)
        except Exception:
            logger.exception("Fallback send failed for user %s", chat_id)
    except Exception:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–µ–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É %s", chat_id)
        try:
            await bot.send_message(chat_id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —É—Ä–æ–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ /next –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –∞–¥–º—ñ–Ω—É.")
        except Exception:
            pass
    finally:
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª —è–∫—â–æ –±—É–≤
        if temp_to_remove:
            try:
                temp_to_remove.unlink(missing_ok=True)
                logger.info("–¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ: %s", temp_to_remove)
            except Exception:
                logger.exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª %s", temp_to_remove)

# ----------------- –©–û–î–ï–ù–ù–ê –†–û–ó–°–ò–õ–ö–ê -----------------
async def daily_job():
    logger.info("–†–æ–∑—Å–∏–ª–∫–∞ —É—Ä–æ–∫—ñ–≤: %d –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ –ø–∞–º'—è—Ç—ñ", len(users))
    tasks = []
    for key, data in users.items():
        if data.get("subscribed", False):
            chat_id = int(key)
            tasks.append(send_lesson_to_user(chat_id))
    if tasks:
        await asyncio.gather(*tasks)
    logger.info("–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# ----------------- –•–ï–ù–î–õ–ï–†–ò -----------------
@dp.message_handler(commands=["start", "subscribe"])
async def cmd_start(message: types.Message):
    key = str(message.chat.id)
    already = (key in users) and users[key].get("subscribed", False)
    if already:
        await message.answer("–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ. –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑ ‚Äî /next.")
        return
    users[key] = {"module_idx": users.get(key, {}).get("module_idx", 0), "subscribed": True}
    save_users(users)
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç üëã –¢–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ –≤—ñ–¥–µ–æ-—É—Ä–æ–∫–∏. –ö–æ–∂–Ω–æ–≥–æ —Ä–∞–Ω–∫—É –æ 08:00 (Europe/Warsaw) –±–æ—Ç –Ω–∞–¥—ñ—à–ª–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º–æ–¥—É–ª—å.\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/next - –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫ –∑–∞—Ä–∞–∑\n"
        "/status - –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å\n"
        "/stop - –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å\n"
        "/help - –¥–æ–ø–æ–º–æ–≥–∞"
    )

@dp.message_handler(commands=["stop", "unsubscribe"])
async def cmd_stop(message: types.Message):
    key = str(message.chat.id)
    if key in users:
        users[key]["subscribed"] = False
        save_users(users)
        await message.answer("–í–∏ –≤—ñ–¥–ø–∏—Å–∞–Ω—ñ –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–∏—Ö —É—Ä–æ–∫—ñ–≤. –©–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –∑–Ω–æ–≤—É ‚Äî /start.")
    else:
        await message.answer("–í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ. –©–æ–± –ø–æ—á–∞—Ç–∏ ‚Äî /start.")

@dp.message_handler(commands=["next"])
async def cmd_next(message: types.Message):
    key = str(message.chat.id)
    if key not in users:
        users[key] = {"module_idx": 0, "subscribed": False}
        save_users(users)
    await message.answer("–ù–∞–¥—Å–∏–ª–∞—é –Ω–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫...")
    await send_lesson_to_user(message.chat.id)

@dp.message_handler(commands=["status"])
async def cmd_status(message: types.Message):
    key = str(message.chat.id)
    if key not in users:
        await message.answer("–í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ. /start ‚Äî —â–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å.")
        return
    idx = users[key].get("module_idx", 0)
    subscribed = users[key].get("subscribed", False)
    await message.answer(f"–ü—Ä–æ–≥—Ä–µ—Å: –º–æ–¥—É–ª—å {idx} –∑ {len(MODULE_VIDEOS)}.\n–ü—ñ–¥–ø–∏—Å–∫–∞: {'–∞–∫—Ç–∏–≤–Ω–∞' if subscribed else '–≤–∏–º–∫–Ω–µ–Ω–∞'}.")

@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    await message.answer(
        "–¶–µ–π –±–æ—Ç –Ω–∞–¥—Å–∏–ª–∞—î —â–æ–¥–µ–Ω–Ω—ñ –≤—ñ–¥–µ–æ-—É—Ä–æ–∫–∏ –æ 08:00 Europe/Warsaw.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/start ‚Äî –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è\n"
        "/stop ‚Äî –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è\n"
        "/next ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑\n"
        "/status ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø—Ä–æ–≥—Ä–µ—Å\n"
        "/help ‚Äî —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
    )

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
@dp.errors_handler()
async def global_error_handler(update, error):
    logger.exception("Global error: %s", error)
    return True

# ----------------- –ì–û–õ–û–í–ù–ê -----------------
def main():
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—ñ–¥–µ–æ
    missing = [v for v in MODULE_VIDEOS if not (VIDEOS_DIR / v).exists()]
    if missing:
        logger.warning("–í—ñ–¥—Å—É—Ç–Ω—ñ –≤—ñ–¥–µ–æ—Ñ–∞–π–ª–∏ —É %s: %s", VIDEOS_DIR, missing)
        # –†–æ–±–æ—Ç–∞ –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è; –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—Ç—Ä–∏–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –≤—ñ–¥–µ–æ

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    trigger = CronTrigger(hour=SCHEDULE_HOUR, minute=SCHEDULE_MINUTE, timezone=TIMEZONE)
    scheduler.add_job(lambda: asyncio.create_task(daily_job()), trigger=trigger, id="daily_send")
    scheduler.start()
    logger.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ: —â–æ–¥–Ω—è –æ %02d:%02d %s", SCHEDULE_HOUR, SCHEDULE_MINUTE, TIMEZONE)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ long polling
    executor.start_polling(dp, skip_updates=True)

if __name__ == "__main__":
    main()
