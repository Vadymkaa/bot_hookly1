#!/usr/bin/env python3
# bot_protected.py
"""
Telegram bot: —â–æ–¥–µ–Ω–Ω—ñ –≤—ñ–¥–µ–æ-—É—Ä–æ–∫–∏ –æ 08:00 Europe/Warsaw (5 –º–æ–¥—É–ª—ñ–≤).
–ó–∞—Ö–∏—Å—Ç: protect_content + –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫ (ffmpeg drawtext).
"""

import asyncio
import json
import logging
import os
import subprocess
import tempfile
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# ----------------- –ö–û–ù–§–Ü–ì -----------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–í–∫–∞–∂–∏ BOT_TOKEN –≤ .env —Ñ–∞–π–ª—ñ")

VIDEOS_DIR = Path("videos")
USERS_FILE = Path("users.json")
TIMEZONE = ZoneInfo("Europe/Warsaw")
SCHEDULE_HOUR = 8
SCHEDULE_MINUTE = 0

MODULE_VIDEOS = [
    "module1.mp4",
    "module2.mp4",
    "module3.mp4",
    "module4.mp4",
    "module5.mp4",
]

MODULE_TEXTS = [
    (
        "üéì *–ú–æ–¥—É–ª—å 1 ‚Äî –û—Å–Ω–æ–≤–∏ –¥–∏–∑–∞–π–Ω—É, —â–æ –ø—Ä–æ–¥–∞—î*\n\n"
        "üî∏ –Ø–∫ –º–∏—Å–ª–∏—Ç–∏ —è–∫ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, –∞ –Ω–µ —è–∫ –¥–∏–∑–∞–π–Ω–µ—Ä\n"
        "üî∏ –ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è: –∫–æ–ª—å–æ—Ä–∏, —à—Ä–∏—Ñ—Ç–∏, –∫–æ–º–ø–æ–∑–∏—Ü—ñ—è\n"
        "üî∏ –¢–∏–ø–æ–≤—ñ –ø–æ–º–∏–ª–∫–∏ —É –≤—ñ–∑—É–∞–ª–∞—Ö –¥–ª—è –∫—É—Ä—Å—ñ–≤\n\n"
        "_–ü—ñ–¥–∫–∞–∑–∫–∞:_ –ø–æ—á–Ω–∏ –∑ –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏ ‚Äî –∫—Ä–∞—Å–∏–≤–æ –º–∞—î –ø—Ä–æ–¥–∞–≤–∞—Ç–∏."
    ),
    (
        "üé® *–ú–æ–¥—É–ª—å 2 ‚Äî Canva: —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤—ñ–≤*\n\n"
        "üî∏ –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —à–∞–±–ª–æ–Ω–∏, –±—Ä–µ–Ω–¥–∏–Ω–≥\n"
        "üî∏ –†–æ–±–æ—Ç–∞ –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º–∏ —Å—Ö–µ–º–∞–º–∏ —Ç–∞ —à—Ä–∏—Ñ—Ç–∞–º–∏\n"
        "üî∏ –ê–¥–∞–ø—Ç–∞—Ü—ñ—è —à–∞–±–ª–æ–Ω—ñ–≤ –ø—ñ–¥ –Ω—ñ—à—É\n\n"
        "_–ü—ñ–¥–∫–∞–∑–∫–∞:_ —à–∞–±–ª–æ–Ω ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, —Ä–æ–±–∏ –π–æ–≥–æ —Å–≤–æ—ó–º."
    ),
    (
        "üöÄ *–ú–æ–¥—É–ª—å 3 ‚Äî –ö—Ä–µ–∞—Ç–∏–≤, —è–∫–∏–π –ø—Ä–æ–¥–∞—î*\n\n"
        "üî∏ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–Ω–µ—Ä–∞: Hook ‚Üí Value ‚Üí CTA\n"
        "üî∏ –í–∏–±—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–º–æ—Ü—ñ–π–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É\n"
        "üî∏ –ü—Ä–∏–∫–ª–∞–¥–∏ —Ä–æ–±–æ—á–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤—ñ–≤\n\n"
        "_–ü—ñ–¥–∫–∞–∑–∫–∞:_ –µ–º–æ—Ü—ñ—è + —á—ñ—Ç–∫–∏–π CTA = –∫–æ–Ω–≤–µ—Ä—Å—ñ—è."
    ),
    (
        "‚úçÔ∏è *–ú–æ–¥—É–ª—å 4 ‚Äî –ü—Ä–∞–∫—Ç–∏–∫–∞: —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä—à–∏–π –ø—Ä–æ–¥–∞—é—á–∏–π –∫—Ä–µ–∞—Ç–∏–≤*\n\n"
        "üî∏ –ü–æ–∫—Ä–æ–∫–æ–≤–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏–∑–∞–π–Ω—É\n"
        "üî∏ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–Ω–µ—Ä–∞ –¥–ª—è Meta, Telegram, –ª–µ–Ω–¥–∏–Ω–≥—É\n"
        "üî∏ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ –∞–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ\n\n"
        "_–ü—ñ–¥–∫–∞–∑–∫–∞:_ —Ç–µ—Å—Ç—É–π A/B —ñ –∑–≤—É–∂—É–π –∞—É–¥–∏—Ç–æ—Ä—ñ—é."
    ),
    (
        "üåü *–ú–æ–¥—É–ª—å 5 ‚Äî –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ —Ñ—ñ—à–∫–∏ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∏*\n\n"
        "üî∏ –ë—Ä–µ–Ω–¥-–ø–∞–∫ —É Canva\n"
        "üî∏ –û–±–∫–ª–∞–¥–∏–Ω–∫–∏ –¥–ª—è –≤—ñ–¥–µ–æ, —Å–ª–∞–π–¥—ñ–≤, –∫—É—Ä—Å—ñ–≤\n"
        "üî∏ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏–∑–∞–π–Ω—ñ–≤\n\n"
        "_–ü—ñ–¥–∫–∞–∑–∫–∞:_ —Å–∏—Å—Ç–µ–º–Ω—ñ—Å—Ç—å –µ–∫–æ–Ω–æ–º–∏—Ç—å —Ç–∏—Å—è—á—ñ –≥–æ–¥–∏–Ω."
    ),
]

ENABLE_WATERMARK = True
FONT_PATH = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"

DRAWTEXT_TEMPLATE = (
    "fontfile={font}:text='{text}':fontsize=24:fontcolor=white:box=1:boxcolor=black@0.5:"
    "boxborderw=5:x=10:y=H-th-10"
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ----------------- –ö–û–†–ò–°–¢–£–í–ê–ß–Ü -----------------
def load_users() -> Dict[str, dict]:
    if USERS_FILE.exists():
        try:
            with open(USERS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            logger.exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ users.json ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π.")
            return {}
    return {}

def save_users(data: Dict[str, dict]):
    try:
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ users.json")

users = load_users()

# ----------------- –í–û–î–Ø–ù–ò–ô –ó–ù–ê–ö -----------------
def create_watermarked_video(input_path: Path, user_tag: str) -> Path:
    if not Path(FONT_PATH).exists():
        raise FileNotFoundError(f"–®—Ä–∏—Ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {FONT_PATH}")

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
    raw_text = f"{user_tag} ‚Ä¢ {timestamp}"
    safe_text = raw_text.replace(":", "\\:").replace("'", "\\'")
    drawtext = DRAWTEXT_TEMPLATE.format(font=FONT_PATH, text=safe_text)

    tmpf = tempfile.NamedTemporaryFile(prefix="wm_", suffix=".mp4", delete=False)
    out_path = Path(tmpf.name)
    tmpf.close()

    cmd = [
        "ffmpeg",
        "-y",
        "-i", str(input_path),
        "-vf", f"drawtext={drawtext}",
        "-c:a", "copy",
        str(out_path),
    ]
    logger.info("–ó–∞–ø—É—Å–∫–∞—é ffmpeg –¥–ª—è %s -> %s", input_path, out_path)
    proc = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if proc.returncode != 0:
        out_path.unlink(missing_ok=True)
        err = proc.stderr.decode("utf-8", errors="ignore")
        raise RuntimeError(f"ffmpeg failed: {err}")
    return out_path

# ----------------- –í–Ü–î–ü–†–ê–í–ö–ê –£–†–û–ö–£ -----------------
async def send_lesson_to_user(chat_id: int):
    key = str(chat_id)
    if key not in users or not users[key].get("subscribed", False):
        return

    idx = users[key].get("module_idx", 0)
    if idx >= len(MODULE_VIDEOS):
        await bot.send_message(chat_id, "‚úÖ –í–∏ –ø—Ä–æ–π—à–ª–∏ –≤—Å—ñ 5 –º–æ–¥—É–ª—ñ–≤. –©–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É ‚Äî /start.")
        users[key]["subscribed"] = False
        save_users(users)
        return

    video_file = VIDEOS_DIR / MODULE_VIDEOS[idx]
    caption = MODULE_TEXTS[idx]

    if not video_file.exists():
        await bot.send_message(chat_id, f"‚ö†Ô∏è –í—ñ–¥–µ–æ –¥–ª—è –º–æ–¥—É–ª—è {idx+1} –≤—ñ–¥—Å—É—Ç–Ω—î.")
        return

    send_path = video_file
    temp: Optional[Path] = None

    try:
        if ENABLE_WATERMARK:
            try:
                chat = await bot.get_chat(chat_id)
                user_tag = chat.username or f"id{chat_id}"
            except Exception:
                user_tag = f"id{chat_id}"

            try:
                send_path = create_watermarked_video(video_file, user_tag)
                temp = send_path
            except Exception:
                pass

        with open(send_path, "rb") as fp:
            await bot.send_video(
                chat_id=chat_id,
                video=fp,
                caption=caption,
                parse_mode="Markdown",
                protect_content=True,
            )

        users[key]["module_idx"] = idx + 1
        save_users(users)

    finally:
        if temp:
            temp.unlink(missing_ok=True)

# ----------------- –©–û–î–ï–ù–ù–ê –†–û–ó–°–ò–õ–ö–ê -----------------
async def daily_job():
    tasks = []
    for key, data in users.items():
        if data.get("subscribed", False):
            tasks.append(send_lesson_to_user(int(key)))
    if tasks:
        await asyncio.gather(*tasks)

# ----------------- –•–ï–ù–î–õ–ï–†–ò -----------------
@dp.message_handler(commands=["start", "subscribe"])
async def cmd_start(message: types.Message):
    key = str(message.chat.id)
    already = key in users and users[key].get("subscribed", False)
    if already:
        await message.answer("–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ. /next ‚Äî –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–∏–π —É—Ä–æ–∫.")
        return
    users[key] = {"module_idx": users.get(key, {}).get("module_idx", 0), "subscribed": True}
    save_users(users)
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç üëã –¢–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ –≤—ñ–¥–µ–æ-—É—Ä–æ–∫–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n/next ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ —É—Ä–æ–∫\n/status ‚Äî –ø—Ä–æ–≥—Ä–µ—Å\n/stop ‚Äî –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è"
    )

@dp.message_handler(commands=["stop", "unsubscribe"])
async def cmd_stop(message: types.Message):
    key = str(message.chat.id)
    if key in users:
        users[key]["subscribed"] = False
        save_users(users)
        await message.answer("–í–∏ –≤—ñ–¥–ø–∏—Å–∞–Ω—ñ.")
    else:
        await message.answer("–í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ.")

@dp.message_handler(commands=["next"])
async def cmd_next(message: types.Message):
    key = str(message.chat.id)
    if key not in users:
        users[key] = {"module_idx": 0, "subscribed": False}
        save_users(users)
    await message.answer("–ù–∞–¥—Å–∏–ª–∞—é...")
    await send_lesson_to_user(message.chat.id)

@dp.message_handler(commands=["status"])
async def cmd_status(message: types.Message):
    key = str(message.chat.id)
    if key not in users:
        await message.answer("–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ.")
        return
    idx = users[key].get("module_idx", 0)
    sub = users[key].get("subscribed", False)
    await message.answer(f"–ü—Ä–æ–≥—Ä–µ—Å: {idx}/{len(MODULE_VIDEOS)}\n–ü—ñ–¥–ø–∏—Å–∫–∞: {'–∞–∫—Ç–∏–≤–Ω–∞' if sub else '–≤–∏–º–∫–Ω–µ–Ω–∞'}")

@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥–∏: /start /next /status /stop /help")

# ----------------- –û–¢–†–ò–ú–ê–ù–ù–Ø file_id -----------------
@dp.message_handler(content_types=['video'])
async def handle_video_file_id(message: types.Message):
    """–ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—Å–∏–ª–∞—î –≤—ñ–¥–µ–æ ‚Äî –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ file_id."""
    try:
        file_id = message.video.file_id
        file_unique_id = message.video.file_unique_id

        await message.reply(
            f"‚úÖ –í—ñ–¥–µ–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n"
            f"üé• *file_id:* `{file_id}`\n"
            f"üÜî *unique_id:* `{file_unique_id}`",
            parse_mode="Markdown"
        )
    except Exception:
        await message.reply("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ file_id.")

# ----------------- –ì–õ–û–ë–ê–õ–¨–ù–ò–ô ERROR HANDLER -----------------
@dp.errors_handler()
async def global_error_handler(update, error):
    logger.exception("Global error: %s", error)
    return True

# ----------------- MAIN -----------------
def main():
    missing = [v for v in MODULE_VIDEOS if not (VIDEOS_DIR / v).exists()]
    if missing:
        logger.warning("–í—ñ–¥—Å—É—Ç–Ω—ñ –≤—ñ–¥–µ–æ: %s", missing)

    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    trigger = CronTrigger(hour=SCHEDULE_HOUR, minute=SCHEDULE_MINUTE, timezone=TIMEZONE)
    scheduler.add_job(lambda: asyncio.create_task(daily_job()), trigger=trigger)
    scheduler.start()

    executor.start_polling(dp, skip_updates=True)

if __name__ == "__main__":
    main()
